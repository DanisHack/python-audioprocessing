#!/usr/bin/env python

"""
This program is part of the Python audio processing suite.

Distributed under the GPL v3.  Copyright Manuel Amador (Rudd-O).
"""

import audioprocessing as a
import cPickle as pickle
from optparse import OptionParser
import wave
import sys
import os
import numpy

usage = """usage: %prog [options] file1.wav file2.wav

This program calculates the Butterscotch signature of the two supplied sound files, and then performs a correlation analysis, correlating each spectrum analysis from file1.wav with the corresponding spectrum analysis from file2.wav.

Errors cause an exit code of 1.  If the (first 60 seconds of the) files are exactly the same, exit code is 3.  If the files are virtually the same (minimum correlation >= 0.995) exit code is 0.  If the files are not the same at all, exit code is 4."""

epilog = """This program only knows how to process 16-bit little-endian linear-encoded 44.100 KHz mono / stereo / multichannel RIFF WAVE files.  It also doesn't know how to read from standard input or named pipes, since it needs to perform a seek in the audio file."""
parser = OptionParser(usage=usage,epilog=epilog)
parser.add_option("-d","--decibel",help="Correlate using decibel (dB) levels instead of raw signal values.  Correlation values among nearly-identical songs decrease substantially using this option, so it's not recommended.  Similarity verdicts are automatically disabled if this option is used.", action="store_true",dest="use_dB")
parser.add_option("-s","--full-spectrum",help="Compute the full spectrum below the Nyquist frequency instead of just up to 11025 Hz.  The full spectrum is useful to correlate files encoded at different bitrates, to determine how lossy compression affected correlation.", action="store_true",dest="full_spectrum")
parser.add_option("-b","--by-band",help="Correlate corresponding frequency bands from each song rather than correlating each spectrum analysis.", action="store_true",dest="by_band")
parser.add_option("-p","--pickle",help="Output a pickled representation in the form of an array with the correlations, one per pair of spectrum analysis.  If you're interfacing programmatically with this program from another Python program , you should read this output and load it with the pickle module.", action="store_true",dest="pickled")
options,args = parser.parse_args()


if len(args) != 2:
	parser.print_help()
	sys.exit(os.EX_USAGE)

signatures = []
for arg in args:
	try:
		func = a.wav_butterscotch
		if arg.lower().endswith("mp3"): func = a.mp3_butterscotch
		signal_onset,signature =func(arg,full_spectrum=options.full_spectrum,use_dB=options.use_dB)
		signatures.append(signature)
	except (IOError,OSError,wave.Error,NotImplementedError,
			a.NoAudioOnset,a.NotEnoughAudio),e:
		sys.stderr.write("%s: %s\n"%(arg,str(e)))
		sys.stderr.flush()
		sys.exit(1)

if signatures[0].shape != signatures[1].shape:
	if options.by_band:
		sys.stderr.write("One or more of the files is too short to correlate by band\n")
	else:
		assert False, "Impossible: apparently the Butterscotch signature for one file has a different number of bands than the other's signature!"
	sys.stderr.flush()
	sys.exit(1)

if options.by_band: func = a.butterscotch_correlate_by_band
else: func = a.butterscotch_correlate_by_spectrum
correls = func(*signatures)
avgcorrel = sum(correls) / len(correls)
maxcorrel = max(correls)
mincorrel = min(correls)
if options.pickled:
	print pickle.dumps(correls),
else:
	for n,correl in enumerate(correls):
		if options.by_band: print "Correlation of band %d: %.06f"%(n+1,correl)
		else: print "Correlation of spectrum %d: %.06f"%(n+1,correl)
	print "Average correlation: %.06f"% avgcorrel
	print "Highest correlation: %.06f in spectrum %d"%(maxcorrel,correls.index(maxcorrel)+1)
	print "Lowest correlation: %.06f in spectrum %d"%(mincorrel,correls.index(mincorrel)+1)
if options.by_band: samesong,virtually = 1.0,0.9
else: samesong,virtually = 1.0,0.99
if avgcorrel == samesong:
	if not options.pickled and not options.use_dB: print "Verdict: exactly the same file"
	sys.exit(3)
elif virtually <= avgcorrel:
	if not options.pickled and not options.use_dB: print "Verdict: virtually the same song"
	sys.exit(0)
else:
	if not options.pickled and not options.use_dB: print "Verdict: not the same song"
	sys.exit(4)
